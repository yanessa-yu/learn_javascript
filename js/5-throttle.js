//节流
//防抖有一个问题
//如果在限定时段内，不断触发滚动事件，
//只要不停止触发，理论上就永远不会执行指定函数

//效果：如果短时间内大量触发同一事件，
//那么在函数执行一次之后，改函数在指定时间期限内不再执行
//直至过了这段时间才重新生效

function throttle(fn, delay){
    var valid = true //设定一个开关
    //开关默认为开启状态
    //如果开关状态为开启，则开始计时，到达指定时间后，执行函数
    //计时之前将开关关闭，在此阶段不接受其他请求
    //等到计时回调函数执行完成后，将开关开启，接收其他请求
    return function(){
        if(!valid){
            return false
        }
        valid = false
        setTimeout(()=>{
            fn()
            valid = true;
        })
    }
}


//防抖和节流的应用场景
//1、搜索框input事件
//2、页面滚动时

//相关的库：undercore.js